{"version":3,"sources":["services/movie_api.js","components/SearchBar/SearchBar.jsx","pages/MoviesPage.jsx"],"names":["BASE_URL","API_KEY","fetchMostPopularMovies","axios","get","fetchMovieByQuery","query","fetchDetailsAboutMovie","id","fetchMovieCast","fetchMovieReviews","SeacrhBar","state","value","handleChange","e","setState","target","handleSubmit","preventDefault","onSubmit","props","this","onChange","type","Component","Movies","movies","onSearch","API","then","res","data","results","location","history","push","search","catch","err","Error","searchParams","URLSearchParams","match","length","map","movie","key","to","pathname","url","from","title"],"mappings":"qHAAA,+LAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAyB,WACpC,OAAOC,IAAMC,IAAN,UAAaJ,EAAb,uCAAoDC,KAGhDI,EAAoB,SAAAC,GAC/B,OAAOH,IAAMC,IAAN,UACFJ,EADE,iCAC+BC,EAD/B,kBACgDK,KAI5CC,EAAyB,SAAAC,GACpC,OAAOL,IAAMC,IAAN,UAAaJ,EAAb,kBAA+BQ,EAA/B,oBAA6CP,KAGzCQ,EAAiB,SAAAD,GAC5B,OAAOL,IAAMC,IAAN,UAAaJ,EAAb,kBAA+BQ,EAA/B,4BAAqDP,KAGjDS,EAAoB,SAAAF,GAC/B,OAAOL,IAAMC,IAAN,UAAaJ,EAAb,kBAA+BQ,EAA/B,4BAAqDP,M,kHCe/CU,E,2MA/BbC,MAAQ,CACNC,MAAO,I,EAGTC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZH,MAAOE,EAAEE,OAAOJ,S,EAIpBK,aAAe,SAAAH,GACbA,EAAEI,kBAGFC,EAFqB,EAAKC,MAAlBD,UACU,EAAKR,MAAfC,OAER,EAAKG,SAAS,CACZH,MAAO,M,wEAID,IACAA,EAAUS,KAAKV,MAAfC,MACR,OACE,0BAAMO,SAAUE,KAAKJ,cACnB,2BAAOL,MAAOA,EAAOU,SAAUD,KAAKR,eACpC,4BAAQU,KAAK,UAAb,e,GA9BgBC,a,QCGlBC,E,2MAmBJd,MAAQ,CACNe,OAAQ,I,EAYVC,SAAW,SAAAtB,GACTuB,IAAsBvB,GACnBwB,MAAK,SAAAC,GACJ,EAAKf,SAAS,CACZW,OAAQI,EAAIC,KAAKC,UAFR,MAImB,EAAKZ,MAA3Ba,EAJG,EAIHA,SAJG,EAIOC,QACVC,KAAR,eACKF,EADL,CAEEG,OAAO,SAAD,OAAW/B,SAGpBgC,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,O,mFAtBD,IACXL,EAAaZ,KAAKD,MAAlBa,SAER,GAAIA,EAASG,OAAQ,CACnB,IAAMI,EAAe,IAAIC,gBAAgBR,EAASG,QAAQjC,IAAI,SAC9DkB,KAAKM,SAASa,M,+BAqBR,IACAd,EAAWL,KAAKV,MAAhBe,OADD,EAEqBL,KAAKD,MAAzBsB,EAFD,EAECA,MAAOT,EAFR,EAEQA,SAEf,OACE,6BACE,kBAAC,EAAD,CAAWd,SAAUE,KAAKM,WACzBD,EAAOiB,OAAS,GACf,4BACGjB,EAAOkB,KAAI,SAAAC,GAAK,OACf,wBAAIC,IAAKD,EAAMtC,IACb,kBAAC,IAAD,CACEwC,GAAI,CACFC,SAAS,GAAD,OAAKN,EAAMO,IAAX,YAAkBJ,EAAMtC,IAChCI,MAAO,CAAEuC,KAAK,eAAMjB,MAGrBY,EAAMM,iB,GAlEJ3B,aA6ENC","file":"static/js/movie-page.4d1631c6.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e0c73a674fe9ac3d07ab423a32b0f862';\n\nexport const fetchMostPopularMovies = () => {\n  return axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieByQuery = query => {\n  return axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`,\n  );\n};\n\nexport const fetchDetailsAboutMovie = id => {\n  return axios.get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieCast = id => {\n  return axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieReviews = id => {\n  return axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n};\n","import React, { Component } from 'react';\nimport T from 'prop-types';\n\nclass SeacrhBar extends Component {\n  static propTypes = {\n    onSubmit: T.func.isRequired,\n  };\n\n  state = {\n    value: '',\n  };\n\n  handleChange = e => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    const { value } = this.state;\n    onSubmit(value);\n    this.setState({\n      value: '',\n    });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input value={value} onChange={this.handleChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n    );\n  }\n}\n\nexport default SeacrhBar;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport T from 'prop-types';\nimport Searchbar from '../components/SearchBar/SearchBar';\nimport * as API from '../services/movie_api';\n\nclass Movies extends Component {\n  static propTypes = {\n    match: T.shape({\n      url: T.string.isRequired,\n      params: T.shape({\n        movieId: T.string,\n      }),\n    }).isRequired,\n    history: T.shape({\n      push: T.func,\n    }).isRequired,\n    location: T.shape({\n      search: T.string.isRequired,\n      state: T.shape({\n        from: T.shape({}),\n      }),\n    }).isRequired,\n  };\n\n  state = {\n    movies: [],\n  };\n\n  componentDidMount() {\n    const { location } = this.props;\n\n    if (location.search) {\n      const searchParams = new URLSearchParams(location.search).get('query');\n      this.onSearch(searchParams);\n    }\n  }\n\n  onSearch = query => {\n    API.fetchMovieByQuery(query)\n      .then(res => {\n        this.setState({\n          movies: res.data.results,\n        });\n        const { location, history } = this.props;\n        history.push({\n          ...location,\n          search: `query=${query}`,\n        });\n      })\n      .catch(err => {\n        throw new Error(err);\n      });\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { match, location } = this.props;\n\n    return (\n      <div>\n        <Searchbar onSubmit={this.onSearch} />\n        {movies.length > 0 && (\n          <ul>\n            {movies.map(movie => (\n              <li key={movie.id}>\n                <Link\n                  to={{\n                    pathname: `${match.url}/${movie.id}`,\n                    state: { from: { ...location } },\n                  }}\n                >\n                  {movie.title}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"],"sourceRoot":""}