{"version":3,"sources":["pages/Reviews.jsx"],"names":["Reviews","state","reviews","match","this","props","API","params","movieId","then","res","setState","data","results","catch","err","Error","length","map","review","key","id","author","content","Component"],"mappings":"gMAIMA,E,2MASJC,MAAQ,CACNC,QAAS,I,mFAGU,IAAD,OACVC,EAAUC,KAAKC,MAAfF,MAERG,IAAsBH,EAAMI,OAAOC,SAChCC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAET,QAASQ,EAAIE,KAAKC,aAC9CC,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,Q,+BAIZ,IACAb,EAAYE,KAAKH,MAAjBC,QAER,OACE,6BACGA,EAAQe,OAAS,EAChB,4BACGf,EAAQgB,KAAI,SAAAC,GAAM,OACjB,wBAAIC,IAAKD,EAAOE,IACd,6CAAeF,EAAOG,SACtB,2BAAIH,EAAOI,cAKjB,4F,GAtCYC,aA6CPxB","file":"static/js/reviews-page.47cb1cb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport T from 'prop-types';\nimport * as API from '../services/movie_api';\n\nclass Reviews extends Component {\n  static propTypes = {\n    match: T.shape({\n      params: T.shape({\n        movieId: T.string,\n      }),\n    }).isRequired,\n  };\n\n  state = {\n    reviews: [],\n  };\n\n  componentDidMount() {\n    const { match } = this.props;\n\n    API.fetchMovieReviews(match.params.movieId)\n      .then(res => this.setState({ reviews: res.data.results }))\n      .catch(err => {\n        throw new Error(err);\n      });\n  }\n\n  render() {\n    const { reviews } = this.state;\n\n    return (\n      <div>\n        {reviews.length > 0 ? (\n          <ul>\n            {reviews.map(review => (\n              <li key={review.id}>\n                <p>{`Author: ${review.author}`}</p>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>We do not have any reviews for this movie. Be the first!</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Reviews;\n"],"sourceRoot":""}